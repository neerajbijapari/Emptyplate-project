#!/usr/bin/env node

import path from "path";
import fs from "fs-extra";
import { execa } from "execa";
import chalk from "chalk";
import inquirer from "inquirer";
import { fileURLToPath } from "url";
import { appJsxContent, serverCode, dbConfig } from "./Code/sample_code.js";

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// CLI Arguments
const appName = process.argv[2];
const setupType = process.argv[3]; // Optional direct setup type

if (!appName) {
  console.log(chalk.red("Please provide a project name"));
  console.log(chalk.gray("Usage: npx krito my-app [frontend|backend|fullstack]"));
  console.log(chalk.gray("Or: npx krito my-app (for interactive mode)"));
  process.exit(1);
}

const appPath = path.join(process.cwd(), appName);
const frontendPath = path.join(appPath, "frontend");
const backendPath = path.join(appPath, "backend");

// Setup type options
const SETUP_TYPES = {
  FRONTEND: 'frontend',
  BACKEND: 'backend',
  FULLSTACK: 'fullstack'
};

// Frontend setup function
const setupFrontend = async () => {
  console.log(chalk.green("Setting up Vite + React frontend..."));
  
  const targetPath = setupType === SETUP_TYPES.FRONTEND ? appPath : frontendPath;
  const projectName = setupType === SETUP_TYPES.FRONTEND ? appName : "frontend";
  
  await execa(
    "npm",
    ["create", "vite@latest", projectName, "--", "--template", "react"],
    {
      cwd: setupType === SETUP_TYPES.FRONTEND ? process.cwd() : appPath,
      stdio: "inherit",
    }
  );

  console.log(chalk.blue("Installing frontend dependencies..."));
  await execa("npm", ["install"], { cwd: targetPath, stdio: "inherit" });

  console.log(chalk.magenta("Installing Tailwind CSS..."));
  await execa("npm", ["install", "-D", "tailwindcss", "@tailwindcss/vite"], {
    cwd: targetPath,
    stdio: "inherit",
  });

  // Update vite.config.js to include Tailwind plugin
  const viteConfigPath = path.join(targetPath, "vite.config.js");
  let viteConfig = await fs.readFile(viteConfigPath, "utf8");

  if (!viteConfig.includes("@tailwindcss/vite")) {
    viteConfig = viteConfig.replace(
      "import { defineConfig } from 'vite'",
      "import { defineConfig } from 'vite'\nimport tailwindcss from '@tailwindcss/vite'"
    );

    if (viteConfig.includes("plugins: [")) {
      viteConfig = viteConfig.replace(
        "plugins: [",
        "plugins: [\n    tailwindcss(),"
      );
    } else {
      viteConfig = viteConfig.replace(
        "export default defineConfig({",
        "export default defineConfig({\n  plugins: [tailwindcss()],"
      );
    }

    await fs.writeFile(viteConfigPath, viteConfig);
  }

  // Create src/index.css with Tailwind import
  const indexCssPath = path.join(targetPath, "src", "index.css");
  const tailwindImports = `@import "tailwindcss";`;
  await fs.outputFile(indexCssPath, tailwindImports);

  // Install additional frontend packages
  console.log(chalk.magenta("Installing react-router-dom..."));
  await execa("npm", ["install", "react-router-dom"], {
    cwd: targetPath,
    stdio: "inherit",
  });

  console.log(chalk.magenta("Installing Axios..."));
  await execa("npm", ["install", "axios"], {
    cwd: targetPath,
    stdio: "inherit",
  });

  console.log(chalk.magenta("Installing Lucide-React..."));
  await execa("npm", ["install", "lucide-react"], {
    cwd: targetPath,
    stdio: "inherit",
  });

  // Create frontend .env file
  const apiUrl = setupType === SETUP_TYPES.FULLSTACK ? 
    "http://localhost:5000" : "http://localhost:3001";
    
  const frontendEnvContent = `VITE_API_URL=${apiUrl}
VITE_APP_NAME=${appName}
`;
  await fs.writeFile(path.join(targetPath, ".env"), frontendEnvContent);

  // Update App.jsx with enhanced krito content
  await fs.writeFile(
    path.join(targetPath, "src", "App.jsx"),
    appJsxContent
  );
};

// Backend setup function
const setupBackend = async () => {
  console.log(chalk.green("Setting up Express backend..."));
  
  const targetPath = setupType === SETUP_TYPES.BACKEND ? appPath : backendPath;
  
  await fs.ensureDir(targetPath);
  await fs.ensureDir(path.join(targetPath, "routes"));
  await fs.ensureDir(path.join(targetPath, "models"));
  await fs.ensureDir(path.join(targetPath, "controllers"));
  await fs.ensureDir(path.join(targetPath, "config"));

  // .env file
  const port = setupType === SETUP_TYPES.BACKEND ? 3001 : 5000;
  const envContent = `PORT=${port}
MONGO_URI=mongodb://localhost:27017/${appName}
NODE_ENV=development
`;
  await fs.writeFile(path.join(targetPath, ".env"), envContent);

  // Database config
  await fs.outputFile(
    path.join(targetPath, "config", "dbConfig.js"),
    dbConfig
  );

  // Server file
  await fs.outputFile(path.join(targetPath, "server.js"), serverCode);

  // Create package.json
  const serverPackageJson = {
    name: `${appName}${setupType === SETUP_TYPES.BACKEND ? '' : '-backend'}`,
    version: "1.0.0",
    type: "module",
    main: "server.js",
    scripts: {
      start: "node server.js",
      dev: "nodemon server.js",
      test: "echo \"Error: no test specified\" && exit 1"
    },
    dependencies: {},
    devDependencies: {}
  };
  
  await fs.outputFile(
    path.join(targetPath, "package.json"),
    JSON.stringify(serverPackageJson, null, 2)
  );

  // Install backend dependencies
  console.log(chalk.blue("Installing backend dependencies..."));
  await execa("npm", ["install", "express", "cors", "mongoose", "dotenv"], {
    cwd: targetPath,
    stdio: "inherit",
  });

  await execa("npm", ["install", "-D", "nodemon"], {
    cwd: targetPath,
    stdio: "inherit",
  });
};

// Interactive setup type selection
const getSetupType = async () => {
  if (setupType && Object.values(SETUP_TYPES).includes(setupType)) {
    return setupType;
  }

  const { selectedSetupType } = await inquirer.prompt([
    {
      type: 'list',
      name: 'selectedSetupType',
      message: 'What would you like to set up?',
      choices: [
        {
          name: '🚀 Full Stack (Frontend + Backend)',
          value: SETUP_TYPES.FULLSTACK,
          short: 'Full Stack'
        },
        {
          name: '⚛️  Frontend Only (React + Vite + Tailwind)',
          value: SETUP_TYPES.FRONTEND,
          short: 'Frontend'
        },
        {
          name: '🔧 Backend Only (Express + MongoDB)',
          value: SETUP_TYPES.BACKEND,
          short: 'Backend'
        }
      ],
      default: SETUP_TYPES.FULLSTACK
    }
  ]);

  return selectedSetupType;
};

// Create project structure
const createProjectStructure = async (type) => {
  if (type === SETUP_TYPES.FULLSTACK) {
    await fs.ensureDir(appPath);
  } else {
    // For frontend or backend only, create the project directly
    await fs.ensureDir(appPath);
  }
};

// Main setup function
const setupApp = async () => {
  try {
    console.log(chalk.cyan(`\n🎯 Kicking off krito for: ${chalk.bold(appName)}\n`));
    
    const selectedSetupType = await getSetupType();
    
    await createProjectStructure(selectedSetupType);

    switch (selectedSetupType) {
      case SETUP_TYPES.FRONTEND:
        await setupFrontend();
        console.log(chalk.greenBright("\n✅ Frontend setup complete!\n"));
        console.log(chalk.yellow(`cd ${appName}/frontend && npm run dev`));
        console.log(chalk.gray("Frontend will run on http://localhost:5173"));
        break;

      case SETUP_TYPES.BACKEND:
        await setupBackend();
        console.log(chalk.greenBright("\n✅ Backend setup complete!\n"));
        console.log(chalk.yellow(`cd ${appName}/backend && npm run dev`));
        console.log(chalk.gray("Backend will run on http://localhost:5000"));
        break;

      case SETUP_TYPES.FULLSTACK:
        await setupFrontend();
        await setupBackend();
        console.log(chalk.greenBright("\n✅ Full stack setup complete!\n"));
        console.log(chalk.yellow("To start development:"));
        console.log(chalk.blue(`cd ${appName}/frontend && npm run dev`));
        console.log(chalk.blue(`cd ${appName}/backend && npm run dev`));
        console.log(chalk.gray("Frontend: http://localhost:5173"));
        console.log(chalk.gray("Backend: http://localhost:5000"));
        break;
    }

    // Create README.md with instructions
    const readmeContent = generateReadme(selectedSetupType);
    const readmePath = selectedSetupType === SETUP_TYPES.FULLSTACK ? 
      path.join(appPath, "README.md") : 
      path.join(appPath, "README.md");
    
    await fs.writeFile(readmePath, readmeContent);

    console.log(chalk.magentaBright(`\n🎉 You're ready to build with krito!\n`));
    
  } catch (err) {
    console.error(chalk.red("❌ Setup failed:\n"), err);
    process.exit(1);
  }
};

// Generate README content based on setup type
const generateReadme = (type) => {
  const baseContent = `# ${appName}

Created with **krito** - A modern full-stack scaffolding tool.

## Project Structure
`;

  switch (type) {
    case SETUP_TYPES.FRONTEND:
      return baseContent + `
This is a **frontend-only** React application.

### Tech Stack
- ⚛️ React 18
- ⚡ Vite
- 🎨 Tailwind CSS
- 🧭 React Router DOM
- 📡 Axios
- 🎯 Lucide React Icons

### Getting Started
\`\`\`bash
npm run dev
\`\`\`

Your app will be available at http://localhost:5173

### Available Scripts
- \`npm run dev\` - Start development server
- \`npm run build\` - Build for production
- \`npm run preview\` - Preview production build
`;

    case SETUP_TYPES.BACKEND:
      return baseContent + `
This is a **backend-only** Express.js API.

### Tech Stack
- 🚀 Express.js
- 🍃 MongoDB (Mongoose)
- 🔧 Node.js (ES6 Modules)
- 🔐 CORS enabled
- 📝 Environment variables

### Getting Started
\`\`\`bash
npm run dev
\`\`\`

Your API will be available at http://localhost:3001

### Available Scripts
- \`npm run dev\` - Start development server with nodemon
- \`npm start\` - Start production server
`;

    case SETUP_TYPES.FULLSTACK:
      return baseContent + `
This is a **full-stack** application with React frontend and Express backend.

### Tech Stack
**Frontend:**
- ⚛️ React 18 + Vite
- 🎨 Tailwind CSS
- 🧭 React Router DOM
- 📡 Axios

**Backend:**
- 🚀 Express.js
- 🍃 MongoDB (Mongoose)
- 🔧 Node.js (ES6 Modules)

### Getting Started

**Start the backend:**
\`\`\`bash
cd backend
npm run dev
\`\`\`

**Start the frontend (in a new terminal):**
\`\`\`bash
cd frontend
npm run dev
\`\`\`

- Frontend: http://localhost:5173
- Backend: http://localhost:5000

### Project Structure
\`\`\`
${appName}/
├── frontend/          # React app
│   ├── src/
│   ├── public/
│   └── package.json
├── backend/           # Express API
│   ├── routes/
│   ├── models/
│   ├── controllers/
│   ├── config/
│   └── server.js
└── README.md
\`\`\`
`;
  }
};

// Start the application
setupApp();